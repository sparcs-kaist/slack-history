[
    {
        "type": "message",
        "user": "U0B6FN5MH",
        "text": "\ud639\uc2dc \ub3d9\ubc29\uc5d0 \ub77c\uc988\ubca0\ub9ac\ud30c\uc774\uc5d0 \ubb3c\ub824 \uc4f8 \uc218 \uc788\ub294 \uc801\uc678\uc120 \uc13c\uc11c \uc788\ub098\uc694?",
        "ts": "1451467863.001040"
    },
    {
        "type": "message",
        "user": "U024U4U5G",
        "text": "\ud0c0\uc784\ub77c\uc778\uc5d0 <https:\/\/michaelochurch.wordpress.com\/2015\/06\/06\/why-agile-and-especially-scrum-are-terrible\/> \uc774\ub7f0 \uae00\uc774 \ubcf4\uc774\ub358\ub370",
        "attachments": [
            {
                "service_name": "Michael O. Church",
                "service_url": "http:\/\/michaelochurch.wordpress.com",
                "title": "Why \u201cAgile\u201d and especially Scrum are\u00a0terrible",
                "title_link": "https:\/\/michaelochurch.wordpress.com\/2015\/06\/06\/why-agile-and-especially-scrum-are-terrible\/",
                "author_name": "michaelochurch",
                "author_link": "https:\/\/michaelochurch.wordpress.com\/author\/michaelochurch\/",
                "text": "Follow-up post: here\nIt\u2019s probably not a secret that I dislike the \u201cAgile\u201d fad that has infested programming. One of the worst varieties of it, Scrum, is a nightmare that I\u2019ve seen actually kill companies. By \u201ckill\u201d I don\u2019t mean \u201cthe culture wasn\u2019t as good afterward\u201d; I mean a drop in the stock\u2019s value of more than 85 percent. This shit is toxic and it needs to die yesterday. For those unfamiliar, let\u2019s first define our terms. Then I\u2019ll get into why this stuff is terrible and often detrimental to actual agility. Then I\u2019ll discuss a single, temporary use case under which \u201cAgile\u201d development actually is a good idea, and from there explain why it is so harmful as a permanent arrangement.\nSo what is Agile?\nThe \u201cAgile\u201d fad grew up in web consulting, where it had a certain amount of value: when dealing with finicky clients who don\u2019t know what they want, one typically has to choose between one of two options. The first is to manage the client: get expectations set, charge appropriately for rework, and maintain a relationship of equality rather than submission. The second is to accept client misbehavior (as, say, many graphic designers must) and orient one\u2019s work flow around client-side dysfunction. Programmers tend not to be good at the first option\u2013 of managing the client\u2013 because it demands too much in the way of social acumen, and the second is appealing to a decision-maker who\u2019s recently been promoted to management and won\u2019t have to do any of the actual work.\nThere\u2019s a large spectrum of work under the name of \u201cconsulting\u201d. There are great consulting firms and there are body shops that taken on the lowest kind of work. Companies tend to give two types of work to consultancies: the highest-end stuff that they might not have the right people for, and the low-end dreck work that would be a morale-killer if allocated to people they\u2019d actually like to retain for a year or few. Scrum is for the body shops, the ones that expect programmers to suffer when client relationships are mismanaged and that will take on a lot of low-end, career-incoherent work that no one wants to do.\nSo what are Scrum and \u201cAgile\u201d? I could get into the different kinds of meetings (\u201cretrospective\u201d and\u00a0\u201cbacklog grooming\u201d and \u201cplanning\u201d) or the theory, but the fundamental unifying trait is violent transparency, often one-sided. Programmers are, in many cases, expected to provide humiliating visibility into their time and work, meaning that they must play a side game of appearing productive in addition to their actual job duties. Instead of working on actual, long-term projects that a person could get excited about, they\u2019re relegated to working on atomized, feature-level \u201cuser stories\u201d and often disallowed to work on improvements that can\u2019t be related to short-term, immediate business needs (often delivered from on-high). Agile eliminates the concept of ownership and treats programmers as interchangeable, commoditized components.\nIn addition to being infantilizing and repellent, Scrum induces needless anxiety about microfluctuations in one\u2019s own productivity. The violent transparency means that, in theory, each person\u2019s hour-by-hour fluctuations are globally visible\u2013 and for no good reason, because there\u2019s absolutely no evidence that any of this snake oil actually makes things get done quicker or better in the long run. For people with anxiety or mood disorders, who generally perform well when measured on average long-term productivity, but who tend to be most sensitive to invasions of privacy, this is outright discriminatory.\nSpecific flaws of \u201cAgile\u201d and Scrum\n1. Business-driven engineering.\n\u201cAgile\u201d is often sold in comparison to an equally horrible straw man approach to software design called \u201cWaterfall\u201d. What Waterfall and Agile share (and a common source of their dysfunction) is that they\u2019re business-driven development. In Waterfall, projects are defined first by business executives, design is done by middle managers and architects, and then implementation and operations and testing are carried out by multiple tiers of grunts, with each of these functions happening in a stage that must be completed before the next may begin. Waterfall is notoriously dysfunctional and no Agile opponent would argue to the contrary. Under Waterfall, engineers are relegated to work on designs and build systems after the important decisions have all been made and cannot be unmade, and no one talented is motivated to take that kind of project.\nWaterfall replicates the social model of a dysfunctional organization with a defined hierarchy. The most interesting work is done first and declared complete, and the grungy details are passed on to the level below. It\u2019s called \u201cWaterfall\u201d because communication goes only one way. If the design is bad, it must be implemented anyway. (The original designers have probably moved to another project.) Agile, then, replicates the social model of a dysfunctional organization without a well-defined hierarchy. It has engineers still quite clearly below everyone else: the \u201cproduct owners\u201d and \u201cscrum masters\u201d outrank \u201cteam members\u201d, who are the lowest of the low. Its effect is to disentitle the more senior, capable engineers by requiring them to adhere to a reporting process (work only on your assigned tickets, spend 5-10 hours per week in status meetings) designed for juniors. Like a failed communist state that equalizes by spreading poverty, Scrum in its purest form puts all of engineering at the same low level: not a clearly spelled-out one, but clearly below all the business people who are given full authority to decide what gets worked on.\nAgile increases the feedback frequency while giving engineers no real power. That\u2019s a losing bargain, because it means that they\u2019re more likely to jerked around or punished when things take longer than they \u201cseem\u201d they should take. These decisions are invariably made by business people who will call shots\u00a0based on emotion rather than deep insight into the technical challenges or the nature of the development.\nSilicon Valley has gotten a lot wrong, especially in the past five years, but one of the things that it got right is the concept of the engineer-driven company. It\u2019s not always the best for engineers to drive the entire company, but when engineers run engineering and set priorities, everyone wins: engineers are happier with the work they\u2019re assigned (or, better yet, self-assigning) and the business is getting a much higher quality of engineering.\n2. Terminal juniority\n\u201cAgile\u201d is a culture of terminal juniority, lending support to the (extremely misguided) conception of programming as a \u201cyoung man\u2019s game\u201d, even though most of the best\u00a0engineers are not young and quite a few are not men. Agile has no exit strategy. There\u2019s no \u201cWe won\u2019t have to do this once we achieve \u201d clause. It\u2019s designed to be there forever: the \u201cuser stories\u201d and business-driven engineering and endless status meetings will never go away. Architecture and R&amp;D and product development aren\u2019t part of the programmer\u2019s job, because those things don\u2019t fit into atomized \u201cuser stories\u201d or two-week sprints. So, the sorts of projects that programmers want to take on, once they master the basics of the field, are often ignored, because it\u2019s either impossible to atomize them or it\u2019s far more difficult to do so than just to do the work.\nThere\u2019s no role for an actual senior engineer on a Scrum team, and that\u2019s a problem, because many companies that adopt Scrum impose it on the whole organization. Aside from a move into management, there is the option of becoming a \u201cScrum master\u201d responsible for imposing this stuff on the young\u2019uns: a bullshit pseudo-management role without power. The only way to get off a Scrum team and away from living under toxic micromanagement is to burrow further into the beast and impose the toxic micromanagement on other people. What \u201cAgile\u201d and Scrum say to me is that older, senior programmers are viewed as so inessential that they can be ignored, as if programming is a childish thing to be put away before age 35. I don\u2019t agree with that mentality. In fact, I think it\u2019s harmful; I\u2019m in my early 30s and I feel like I\u2019m just starting to be good at programming. Chasing out our elders, just because they\u2019re seasoned enough to know that this \u201cAgile\u201d\/Scrum garbage has nothing to do with computer science and that it has no value, is a horrible idea.\n3. It\u2019s stupidly, dangerously short-term.\u00a0\nAgile is designed for and by consulting firms that are marginal. That is, it\u2019s for firms that don\u2019t have the credibility that would enable them to negotiate with\u00a0clients as equals, and that are facing tight deadlines while each client project is an existential risk. It\u2019s for \u201cscrappy\u201d underdogs. Now, here\u2019s the problem: Scrum is often deployed in large companies and funded startups, but people join those (leaving financial upside on the table, for the employer to collect)\u00a0because they don\u2019t want to be underdogs. No one wants to play from behind unless there\u2019s considerable personal upside in doing so. \u201cAgile\u201d in a corporate job means pain and risk without reward.\nWhen each client project represents existential or severe reputational risk, Agile might be the way to go, because a focus on short-term iterations is useful when the company is under threat and there might not be a long term. Aggressive project management makes sense in an emergency. It doesn\u2019t make sense as a permanent arrangement; at least, not for high-talent programmers who have less stressful and more enjoyable options.\nUnder Agile, technical debt piles up and is not addressed because the business people calling the shots will not see a problem until it\u2019s far too late or, at least, too expensive to fix it. Moreover, individual engineers are rewarded or punished solely based on the completion, or not, of the current two-week \u201csprint\u201d, meaning that no one looks out five \u201csprints\u201d ahead. Agile is just one mindless, near-sighted \u201csprint\u201d after another: no progress, no improvement, just ticket after ticket.\n4. It has no regard for career coherency.\nAtomized user stories aren\u2019t good for engineers\u2019 careers. By age 30, you\u2019re expected to be able to show that you can work at the whole-project level, and that you\u2019re at least ready to go beyond such a level into infrastructure, architecture, research, or leadership. While Agile\/Scrum experience makes it somewhat easier to get junior positions, it eradicates even the possibility of work that\u2019s acceptable for a mid-career or senior engineer.\nIn an emergency, whether it\u2019s a consultancy striving to appease an important client or a corporate \u201cwar room\u201d, career coherency can wait. Few people will refuse to do a couple weeks of unpleasant or career-incoherent work if it\u2019s genuinely important to the company where they work. If nothing else, the importance of that work confers a career benefit. When there\u2019s not an emergency, however, programmers expect their career growth to be taken seriously and will leave. Using \u201cfish frying\u201d as a term-of-art for grunt work that no one enjoys, and that has no intrinsic career value\u00a0to any one, there\u2019s enough career value (internal and external to the organization) in emergency\u00a0or high-profile fish frying that people don\u2019t mind doing it. You can say, \u201cI was in the War Room and had 20 minutes per day with the CEO\u201d and that excuses fish frying. It means you were valued and important. Saying, \u201cI was on a Scrum team\u201d says, \u201cKick me\u201d. Frying fish because you were assigned \u201cuser stories\u201d shows that you were seen as a loser.\n5. Its purpose is to identify low performers, but it has an unacceptably false positive rate.\u00a0\nScrum is sold as a process for \u201cremoving impediments\u201d, which is a nice way of saying \u201cspotting slackers\u201d. The problem with it is that it\u00a0creates more underperformers than it roots out. It\u2019s a surveillance state that requires individual engineers to provide fine-grained visibility into their work and rate of productivity. This is defended using the \u201cnothing to hide\u201d argument, but the fact is that, even for pillar-of-the-community high performers, a surveillance state is an anxiety state. The fact of being observed changes the way people work\u2013 and, in creative fields, for the worse.\nThe first topic coming to mind here is status sensitivity. Programmers love to make-believe that they\u2019ve transcended a few million years of primate evolution related to social status, but the fact is: social status matters, and you\u2019re not \u201cpolitical\u201d if you acknowledge the fact. Older people, women, racial minorities, and people with disabilities tend to be status sensitive because it\u2019s a matter of survival for them. Constant surveillance into one\u2019s work indicates a lack of trust and low social status, and the most status-sensitive people (even if they\u2019re the best workers) are the first ones to decline.\nScrum and \u201cAgile\u201d are designed, on the other hand, for the most status-insensitive people: young, privileged males who haven\u2019t been tested, challenged, or burned yet at work. It\u2019s for people who think that HR and management are a waste of time and that people should just \u201csuck it up\u201d when demeaned or insulted.\nOften, it\u2019s the best employees who fall the hardest when Agile\/Scrum is introduced, because R&amp;D is effectively eliminated, and the obsession with short-term \u201citerations\u201d or sprints means that there\u2019s no room to try something that might actually fail.\nThe truth about underperformers is that you don\u2019t need \u201cAgile\u201d to find out who they are. People know who they are. The reason some teams get loaded down with disengaged, incompetent, or toxic people is that no one does anything about them. That\u2019s a people-level management problem, not a workflow-level process problem.\n6. The Whisky Googles Effect\nThere seems to be some evidence that Agile and Scrum can nudge the marginally incompetent into being marginally employable. I call this the Whisky Goggles Effect: it turns the 3s and 4s into 5s, but it makes you so sloppy that the 7s and 9s want nothing to do with you. Unable to get their creative juices flowing under aggressive micromanagement, the best programmers leave.\nFrom the point of view of a manager unaware of how software works, this might seem like an acceptable trade: a few \u201cprima donna\u201d 7+ leave under the Brave New Scrum, while the 3s and 4s become just-acceptable 5s. The problem is that the difference between a \u201c7\u201d programmer and a \u201c5\u201d programmer is substantially larger than that between a \u201c5\u201d and a \u201c3\u201d. If you lose your best people and your leaders (who may not be in leadership roles on the org-chart) then the slight upgrade of the incompetents for whom Scrum is designed does no good.\nScrum and Agile play into what I call the Status Profit Bias. Essentially, many people in business judge their success or failure not in objective terms, but based on the status differential achieved. Let\u2019s say that the market value of a \u201c3\u201d level programmer is $50,000 per year and, for a \u201c5\u201d programmer, it\u2019s $80,000. (In reality, programmer salaries are all over the map: I know 3\u2019s making over $200,000 and I know 7\u2019s under $70,000, but let\u2019s ignore that.) Convincing a \u201c5\u201d programmer to take a \u201c3\u201d-level salary (in exchange for startup equity!) is marked, psychologically, not as a mere $30,000 in profit but as a 2-point profit.\nAgile\/Scrum and the age discrimination culture in general are about getting the most impressive status profits, rather than actual economic profits. The people who are least informed about what social status they \u201cshould\u201d have are the young. You\u2019ll find a 22-year-old 6 who thinks that he\u2019s a 3 and who will submit to Scrum, but the 50-year-old 9 is likely to know that she\u2019s a 9 and might begrudgingly take 8.5-level conditions but is not about to drop to a 6. Seeking status profits is, however, extremely short-sighted. There may be a whole industry in bringing in 5-level engineers and treating (and paying) them like 4\u2019s, but under current market conditions, it\u2019s far more profitable to hire an 8 an",
                "fallback": "Michael O. Church Link: Why &#8220;Agile&#8221; and especially Scrum are&nbsp;terrible",
                "from_url": "https:\/\/michaelochurch.wordpress.com\/2015\/06\/06\/why-agile-and-especially-scrum-are-terrible\/",
                "id": 1
            }
        ],
        "ts": "1451494876.001041"
    },
    {
        "type": "message",
        "user": "U024U4U5G",
        "text": "\uc5b4\ub5bb\uac8c\uc0dd\uac01\ud558\uc2dc\ub098\uc5ec",
        "ts": "1451494881.001043"
    },
    {
        "type": "message",
        "user": "U024SNAD0",
        "text": "\uc544... \ub370\ube44\uc548 \ucc3d\uc2dc\uc790\uc5ec...",
        "ts": "1451528495.001046"
    },
    {
        "type": "message",
        "user": "U04J6LN3W",
        "text": "<@U0B6FN5MH>: \uc801\uc678\uc120 \uc13c\uc11c\ub294 \uc5c6\uc744\uac70\uc5d0\uc694",
        "ts": "1451530859.001047"
    },
    {
        "type": "message",
        "user": "U0B6FN5MH",
        "text": "\ud751",
        "ts": "1451532626.001048"
    },
    {
        "type": "message",
        "user": "U0B6FN5MH",
        "text": "\uac10\uc0ac\ud569\ub2c8\ub2e4",
        "ts": "1451532630.001049"
    },
    {
        "type": "message",
        "user": "U0FK63YR2",
        "text": "<@U024U4U5G>: \uc2a4\ud06c\ub7fc\uc73c\ub85c \uac1c\ubc1c\ud574 \ubcf8 \uc801\uc774 \uc5c6\uc5b4\uc11c \ubaa8\ub974\uaca0\ub124\uc694",
        "ts": "1451536181.001050"
    },
    {
        "type": "message",
        "user": "U0FK63YR2",
        "text": "\uadf8\ub9ac\uace0 \uc544\ub9c8\ub3c4 \ubbf8\uad6d \uc774\uc57c\uae30 \uac19\uc740\ub370 \ud55c\uad6d\uacfc\ub294 \ub2e4\ub974\uc9c0 \uc54a\uc744\uc9c0",
        "ts": "1451536318.001051"
    },
    {
        "type": "message",
        "user": "U0GRXSW8J",
        "text": "\ud55c\uad6d\uc740 \uc5b4\ub5a8\uae4c\uc694 \u314b\u314b",
        "ts": "1451536852.001052"
    },
    {
        "type": "message",
        "user": "U024U4U5G",
        "text": "\uadf8\ub807\uad70\uc694",
        "ts": "1451541197.001053"
    },
    {
        "type": "message",
        "user": "U025EC52V",
        "text": "<@U0B6FN5MH> \uc5b4\ub5a4 \uc801\uc678\uc120 \uc13c\uc11c\uac00 \ud544\uc694\ud55c\uac00\uc694? \uc801\uc678\uc120 \uc138\uae30\ub97c \uce21\uc815\ud558\ub294 \uc885\ub958\uc778\uac00\uc694? \uc544\ub2c8\uba74 \ub9ac\ubaa8\ucee8 \uc13c\uc11c?",
        "ts": "1451547487.001054"
    },
    {
        "type": "message",
        "user": "U0B6FN5MH",
        "text": "<@U025EC52V>: \uc74c \uc774\ubc88\uc5d0 <@U024SKR87> \ub791 \uac19\uc774 \uac04\ub2e8\ud788 \ubb38\uc744 \ub4e4\uc5b4\uc624\ub294\/\ub098\uac00\ub294 \uc0ac\ub78c \uce74\uc6b4\ud2b8\ub97c \ud558\ub294\uac78 \ub9cc\ub4e4\uc5b4 \ubcf4\ub824 \ud558\uac70\ub4e0\uc694. \uc0ac\uc2e4 \uc800\ud76c\uac00 \uc13c\uc11c\uc5d0 \ub300\ud574 \uc798 \ubab0\ub77c\uc11c \ub3d9\ubc29\uc5d0 \uc788\uc73c\uba74 \ubcf4\uace0 \uc0ac\uc6a9\uac00\ub2a5\ud55c\uc9c0 \uc54c\uc544\ubcf4\ub824\ud588\ub294\ub370, \ubaa8\uc158\/\uc778\uccb4 \uac10\uc9c0\uc5d0 \uc4f8 \uc218 \uc788\uae30\ub9cc \ud558\uba74 \ub420 \uac83 \uac19\uc544\uc694.",
        "ts": "1451548526.001055"
    }
]